#!/usr/bin/env python
'''
Taskset Simulator and Virtual-Gang Combination Generator for RTG-Synch

The purpose of the simulator is the following: Given a candidate taskset
generate all possible virtual-gang combinations. Using a brute-force approach,
determine the virtual-gang combination which gives the smallest cumulative
execution time for the entire taskset.

The optimal solution given by the simulator can be used to evaluate heuristic
and greedy algorithm based solutions.

Copyright (C) 2019 KU-CSL
09-08-2019  Integrate combination generator with taskset simulator
'''
from rtaFactory import RTA
from plotFactory import Plotter
import sys, multiprocessing, json
from tasksetGenerator import Generator

# All time values are in msec; unless specified otherwise
TASKS_PER_PERIOD = [2, 5, 10]
MAX_RUNS = int (sys.argv [3])
NUM_OF_CORES = int (sys.argv [1])
UTILS = range (1, NUM_OF_CORES + 1)
NUM_OF_PROCESSES = int (sys.argv [2])
WORKLOADS = ['light', 'mixed', 'heavy']
SENSITIVITY = False if (len (sys.argv) < 5) else (sys.argv [4] != 0)

if SENSITIVITY:
    POLICIES =  ['rtgsync-gpc', 'rtgsync-ideal-gpc', 'rtgsync-bfc',
                 'rtgsync-ideal-bfc', 'rtgang']
else:
    POLICIES =  ['gftp', 'gftp-ideal', 'threaded', 'threaded-ideal',
                 'rtgsync-gpc', 'rtgsync-ideal-gpc', 'rtgsync-bfc',
                 'rtgsync-ideal-bfc', 'rtgang']

def process_work (tIdx):
    rta = RTA (NUM_OF_CORES, UTILS)

    if SENSITIVITY:
        trs = {t: {p: {} for p in POLICIES} for t in TASKS_PER_PERIOD}

        for t in TASKS_PER_PERIOD:
            generator = Generator (NUM_OF_CORES, UTILS, t)
            taskset = generator.create_taskset ('mixed')

            for p in POLICIES:
                for u in UTILS:
                    trs [t][p][u] = rta.analysis (taskset [u], p, u)
    else:
        trs = {w: {p: {} for p in POLICIES} for w in WORKLOADS}
        generator = Generator (NUM_OF_CORES, UTILS, False)

        for w in WORKLOADS:
            taskset = generator.create_taskset (w)

            for p in POLICIES:
                for u in UTILS:
                    trs [w][p][u] = rta.analysis (taskset [u], p, u)

    with open ('json/p%d.json' % tIdx, 'w') as fdo:
        json.dump (trs, fdo)

    return

def aggregate_results ():
    if SENSITIVITY:
        schedulabilityHash = {t: {p: {u: 0 for u in UTILS} for p in POLICIES} for t
                in TASKS_PER_PERIOD}

        for tpp in TASKS_PER_PERIOD:
            for p in POLICIES:
                for u in UTILS:
                    for t in range (MAX_RUNS):
                        with open ('json/p%d.json' % t, 'r') as fdi:
                            trs = json.load (fdi)
                            schedulabilityHash [tpp][p][u] += trs [str (tpp)][p][str (u)]

                    schedulabilityHash [tpp][p][u] = float (schedulabilityHash [tpp][p][u]) / MAX_RUNS
    else:
        schedulabilityHash = {w: {p: {u: 0 for u in UTILS} for p in POLICIES} for w
                in WORKLOADS}

        for w in WORKLOADS:
            for p in POLICIES:
                for u in UTILS:
                    for t in range (MAX_RUNS):
                        with open ('json/p%d.json' % t, 'r') as fdi:
                            trs = json.load (fdi)
                            schedulabilityHash [w][p][u] += trs [w][p][str (u)]

                    schedulabilityHash [w][p][u] = float (schedulabilityHash [w][p][u]) / MAX_RUNS

    return schedulabilityHash

def main ():
    processes = {}
    block = u"\u2588"
    plotter = Plotter (TASKS_PER_PERIOD)
    manager = multiprocessing.Manager ()

    # for r in range (0, MAX_RUNS, NUM_OF_PROCESSES):
    #     for t in range (r, min (r + NUM_OF_PROCESSES, MAX_RUNS)):
    #         processes [t] = multiprocessing.Process (target = process_work, args = (t,))
    #         processes [t].start ()

    #     for t in range (r, min (r + NUM_OF_PROCESSES, MAX_RUNS)):
    #         processes [t].join ()

    #         progress = (t + 1) * 100 / MAX_RUNS
    #         progressBar = '  Progress: %3d %% %-100s | %3d / %3d\r' % \
    #                             (progress, block * progress, t + 1, MAX_RUNS)
    #         sys.stdout.write (progressBar)
    #         sys.stdout.flush ()

    # print
    print "---> Aggregating results..."
    schedulabilityHash = aggregate_results ()

    print "---> Creating schedulability plots..."
    if SENSITIVITY:
        plotter.create_sensitivity_plot (POLICIES, schedulabilityHash, TASKS_PER_PERIOD, NUM_OF_CORES)
    else:
        plotter.create_schedulability_plot (POLICIES, schedulabilityHash, WORKLOADS, NUM_OF_CORES)

    print "Done!"

    return

if __name__ == '__main__':
    main ()
