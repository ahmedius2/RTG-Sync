#!/usr/bin/env python
'''
Taskset Simulator and Virtual-Gang Combination Generator for RTG-Synch

The purpose of the simulator is the following: Given a candidate taskset
generate all possible virtual-gang combinations. Using a brute-force approach,
determine the virtual-gang combination which gives the smallest cumulative
execution time for the entire taskset.

The optimal solution given by the simulator can be used to evaluate heuristic
and greedy algorithm based solutions.

Copyright (C) 2019 KU-CSL
09-08-2019  Integrate combination generator with taskset simulator
'''
import sys, random
from rtaFactory import RTA
from plotFactory import Plotter
from tasksetGenerator import Generator

# All time values are in msec; unless specified otherwise
NUM_OF_CORES = int (sys.argv [1])

def main ():
    maxRuns = 100
    utils = range (1, NUM_OF_CORES + 1)
    schedulabilityHash = {'light': {}, 'mixed': {}, 'heavy': {}}

    for workloadType in schedulabilityHash:
        block = u"\u2588"
        plotter = Plotter ()
        rta = RTA (NUM_OF_CORES)
        generator = Generator (NUM_OF_CORES)
        schedulabilityHash [workloadType] = {
                                        'rtgang':       {u: 0 for u in utils},
                                        'rtgsynch_bfc': {u: 0 for u in utils},
                                        'rtgsynch_gpc': {u: 0 for u in utils}}
                                             # 'rtgsynch_gpp': {}}

        print "[STATUS] Working on scenario: %s" % (workloadType.capitalize ())

        for r in range (1, maxRuns + 1):
            progress = r * 100 / maxRuns
            progressBar = '  Progress: %3d %% %-100s | %3d / %3d\r' % \
                                (progress, block * progress, r, maxRuns)
            sys.stdout.write (progressBar)
            sys.stdout.flush ()

            taskset = generator.create_taskset (workloadType)
            for policy in schedulabilityHash [workloadType]:
                for u in utils:
                    schedulabilityHash [workloadType][policy][u] += \
                            rta.get_schedulability (taskset [u], policy, u)

        for policy in schedulabilityHash [workloadType]:
            for u in utils:
                schedulabilityHash [workloadType][policy][u] /= \
                                                            float (maxRuns)
        print

        # rta.dbg_print_heuristic_comparison ()
        plotter.create_schedulability_plot (schedulabilityHash [workloadType],
                workloadType, NUM_OF_CORES)

    return

if __name__ == '__main__':
    main ()
