#!/usr/bin/env python
'''
Taskset Simulator and Virtual-Gang Combination Generator for RTG-Synch

The purpose of the simulator is the following: Given a candidate taskset
generate all possible virtual-gang combinations. Using a brute-force approach,
determine the virtual-gang combination which gives the smallest cumulative
execution time for the entire taskset.

The optimal solution given by the simulator can be used to evaluate heuristic
and greedy algorithm based solutions.

Copyright (C) 2019 KU-CSL
09-08-2019  Integrate combination generator with taskset simulator
'''

from taskFactory import Task
from algorithmFactory import Heuristics
from virtualGangFactory import CombinationGenerator

# All time values are in msec; unless specified otherwise
MAX_COMPUTE_TIME = 10
TOTAL_NUM_OF_CORES = 4
TOTAL_NUM_OF_TASKS = 5

def main ():
    taskset = []
    computeTimes = [1, 2, 3, 4, 2]

    for idx in range (1, TOTAL_NUM_OF_TASKS + 1):
        task = Task (idx, computeTimes [idx - 1], 1, MAX_COMPUTE_TIME, TOTAL_NUM_OF_CORES)
        taskset.append (task)
        print task

    virtualGangGenerator = CombinationGenerator (TOTAL_NUM_OF_CORES)
    gangs, computeTimes = virtualGangGenerator.generate_gang_combinations (taskset)

    heuristics = Heuristics ()
    configTimesHash = heuristics.rankConfigurations (gangs, computeTimes)

    return

if __name__ == '__main__':
    main ()
